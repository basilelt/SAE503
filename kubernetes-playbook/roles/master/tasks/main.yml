---
- name: Reset any previous Kubernetes installation
  ansible.builtin.command: kubeadm reset -f
  register: reset_result
  changed_when: "'Successfully deleted' in reset_result.stdout"

- name: Remove old Kubernetes configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/kubernetes/
    - $HOME/.kube/

- name: Check if Kubernetes cluster is already initialized
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_initialized

- name: Initialize Kubernetes cluster
  ansible.builtin.command: >
    kubeadm init
    --pod-network-cidr={{ master_pod_network_cidr }}
    --kubernetes-version=v{{ master_kubernetes_version }}
    --cri-socket=unix:///var/run/containerd/containerd.sock
  register: kubeadm_init
  when: not k8s_initialized.stat.exists
  changed_when: kubeadm_init.rc == 0

- name: Ensure kubelet is enabled
  ansible.builtin.systemd:
    name: kubelet
    enabled: true
    state: started

- name: Install cgroup packages
  ansible.builtin.package:
    name:
      - libcgroup-tools
      - cgroupfs-mount
    state: present

- name: Enable and configure cgroups
  ansible.builtin.command: >
    sudo cgcreate -g cpu,memory:/
  ignore_errors: yes

- name: Configure system for cgroups
  ansible.builtin.copy:
    dest: /etc/systemd/system.conf
    content: |
      [Manager]
      DefaultControllers=cpu memory
  notify:
    - Restart systemd

- name: Ensure cgroup directories exist
  ansible.builtin.file:
    path: "/sys/fs/cgroup/{{ item }}"
    state: directory
  loop:
    - cpu
    - memory

- name: Mount cgroup controllers
  ansible.builtin.shell: |
    if ! mountpoint -q "/sys/fs/cgroup/{{ item }}"; then
      mount -t cgroup -o {{ item }} cgroup "/sys/fs/cgroup/{{ item }}"
    fi
  args:
    executable: /bin/bash
  loop:
    - cpu
    - memory

- name: Restart systemd to apply cgroup changes
  ansible.builtin.systemd:
    name: systemd
    state: restarted
  when: ansible_systemd.version is defined

- name: Verify cgroups are enabled
  ansible.builtin.command: lssubsys -am
  register: cgroups

- name: Fail if required cgroups are not enabled
  ansible.builtin.fail:
    msg: "Required cgroups are not enabled."
  when: "'cpu' not in cgroups.stdout or 'memory' not in cgroups.stdout"

- name: Troubleshoot kubelet status
  ansible.builtin.command: systemctl status kubelet
  register: kubelet_status
  failed_when: kubelet_status.rc != 0
  ignore_errors: true

- name: View kubelet logs
  ansible.builtin.command: journalctl -xeu kubelet
  when: kubelet_status.rc != 0

- name: Create .kube directory for root user
  ansible.builtin.file:
    path: /root/.kube
    state: directory
    mode: '0755'

- name: Copy admin.conf to root's .kube directory
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: true
    mode: '0600'

- name: Create .kube directory for current user
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    mode: '0755'

- name: Copy admin.conf to current user's .kube directory
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Wait for the Kubernetes API Server to become available
  ansible.builtin.wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 6443
    delay: 10
    timeout: 300

- name: Install Flannel network plugin
  ansible.builtin.command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout or 'configured' in flannel_result.stdout"

- name: Get join command
  ansible.builtin.command: kubeadm token create --print-join-command
  register: join_command
  changed_when: false

- name: Set join command fact
  ansible.builtin.set_fact:
    join_command: "{{ join_command.stdout_lines[0] }}"

- name: Verify kubectl can connect to the cluster
  ansible.builtin.command: kubectl get nodes
  register: kubectl_result
  changed_when: false
  until: kubectl_result.rc == 0
  retries: 10
  delay: 10
